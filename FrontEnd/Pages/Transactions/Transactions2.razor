@page "/transactions2"
@using FrontEnd.Pages.Shared
@using FrontEnd.Services.Contracts;
@using Models.DTOs
@using System.Drawing
@inherits TransactionsBase
@inject ITransactionService TransactionService
@using FrontEnd.Services
@inject FrontEnd.Services.ToastService ToastService

<div class="row m-3">
    <div class="col-12">
        <h3 class="float-start">Transactions</h3>
        <button class="float-end btn btn-success" @onclick="() => showNewTransactionModal = true"><i class="bi bi-plus-circle"></i> Add Transaction</button>
    </div>
</div>

<div class="row m-3">
    <div class="row">
        <div class="col-6">
            <div class="row justify-content-center">
                <div class="col-3">
                    <label for="monthlyStartDate">Start Date:</label>
                    <InputDate class="form-control" @bind-Value="monthlyStartDate" @bind-Value:after="() => RenderLastMonthTransactions()" />
                </div>
                <div class="col-3">
                    <label for="monthlyEndDate">End Date:</label>
                    <InputDate class="form-control" @bind-Value="monthlyEndDate" @bind-Value:after="() => RenderLastMonthTransactions()" />
                </div>
            </div>
            <BarChart @ref="monthlyTransactionsByRangeChart" />
        </div>
        <div class="col-6">
            <div class="row justify-content-center">
                <div class="col-3">
                    <label for="projectedStartDate">Start Date:</label>
                    <InputDate class="form-control" @bind-Value="projectedStartDate" @bind-Value:after="() => RenderProjectedMonthlyBalanceByRange()" />
                </div>
                <div class="col-3">
                    <label for="projectedEndDate">End Date:</label>
                    <InputDate class="form-control" @bind-Value="projectedEndDate" @bind-Value:after="() => RenderProjectedMonthlyBalanceByRange()" />
                </div>
            </div>
            <LineChart @ref="projectedMonthlyBalanceByRangeChart" />
        </div>
    </div>
</div>

<Grid @ref="gridRef"
TItem="TransactionDTO"
Class="table table-hover table-bordered table-striped"
Style="--bs-table-hover-bg: PaleGreen; --bb-table-selected-row-background-color: LightGreen;"
DataProvider="TransactionsDataProvider"
AllowSelection="true"
SelectionMode="GridSelectionMode.Multiple"
AllowFiltering="true"
AllowSorting="true"
AllowPaging="true"
PageSize="15"
HeaderRowCssClass="bg-success text-white border-bottom-0"
FiltersRowCssClass="bg-success text-white bg-opacity-25 border-bottom-0"
Responsive="true"
AllowRowClick="true">

    <GridColumns>
        <GridColumn TItem="TransactionDTO" 
        HeaderText="Date" 
        HeaderTextAlignment="Alignment.Center"
        PropertyName="Date"
        SortKeySelector="item => item.Date">
            @context.Date.ToString("dddd, MMMM dd, yyyy")
        </GridColumn>

        <GridColumn TItem="TransactionDTO" 
        HeaderText="Description" 
        HeaderTextAlignment="Alignment.Center"
        PropertyName="Description"
        SortKeySelector="item => item.Description">
            @context.Description
        </GridColumn>

        <GridColumn TItem="TransactionDTO" 
        HeaderText="Amount" 
        HeaderTextAlignment="Alignment.Center"
        TextAlignment="Alignment.End"
        PropertyName="Amount"
        SortKeySelector="item => item.Amount"
        ColumnClass="@(item => item.Amount > 0 ? "text-success" : "text-danger")">
            @context.Amount.ToString("C")
        </GridColumn>

        <GridColumn TItem="TransactionDTO" 
        HeaderText="Balance" 
        HeaderTextAlignment="Alignment.Center"
        TextAlignment="Alignment.End" 
        PropertyName="Balance"
        SortKeySelector="item => item.Balance">
            @context.Balance.ToString("C")
        </GridColumn>

        <GridColumn TItem="TransactionDTO" HeaderText="Action" HeaderTextAlignment="Alignment.Center" Filterable="false">
            <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
                @* <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="async () => await Edit(context)"> Edit </Button> *@
                <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="async () => await DeleteTransactionAsync(context.Id)"> Delete </Button>
            </div>
        </GridColumn>

    </GridColumns>

</Grid>

<div class="blazor-modal @(showNewTransactionModal ? "show fade-in" : "")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header px-4 py-3 bg-success bg-opacity-50 d-flex justify-content-between align-items-center">
                <h5 class="modal-title mb-0">New Transaction</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="() => showNewTransactionModal = false"></button>
            </div>
            <EditForm Model="newTransactionDTO" OnValidSubmit="@(() => AddTransactionAsync(newTransactionDTO))">
                <div class="modal-body m-4">
                    <div class="mb-3">
                        <label>Date</label>
                        <InputDate class="form-control" @bind-Value="newTransactionDTO.Date" />
                    </div>
                    <div class="mb-3">
                        <label>Description</label>
                        <InputText class="form-control" @bind-Value="newTransactionDTO.Description" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <InputNumber class="form-control" @bind-Value="newTransactionDTO.Amount" />
                    </div>
                </div>
                <div class="modal-footer px-4 py-3">
                    <button type="button" class="btn btn-secondary me-2" @onclick="() => showNewTransactionModal = false">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<ConfirmModal @ref="confirmModal" />

@code {
    private BlazorBootstrap.Grid<TransactionDTO> gridRef = default!;
    private BarChart monthlyTransactionsByRangeChart = default!;
    private LineChart projectedMonthlyBalanceByRangeChart = default!;
    private DateOnly monthlyStartDate { get; set; } = DateOnly.FromDateTime(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(-1));
    private DateOnly monthlyEndDate { get; set; } = DateOnly.FromDateTime(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddDays(-1));
    private DateOnly projectedStartDate { get; set; } = DateOnly.FromDateTime(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1));
    private DateOnly projectedEndDate { get; set; } = DateOnly.FromDateTime(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(12));
    public bool showNewTransactionModal 
    { 
        get; 
        set; 
    } = false;
    private ConfirmModal confirmModal = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Transactions = (await TransactionService.List()).OrderByDescending(t => t.Date).ThenByDescending(t => t.Id).ToList();
        monthlyTransactionsByRange = GetMonthlyTransactionsByRange(
            monthlyStartDate,
            monthlyEndDate
        );
        projectedMonthlyBalanceByRange = GetProjectedMonthlyBalanceByRange(
            projectedStartDate,
            projectedEndDate
        );

        if (firstRender)
        {
            await RenderLastMonthTransactions();
            await RenderProjectedMonthlyBalanceByRange();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RenderLastMonthTransactions()
    {
        var data = new ChartData
        {
            Labels = GetMonthNamesInRange(monthlyStartDate, monthlyEndDate),
            Datasets = new List<IChartDataset>()
            {
                new BarChartDataset()
                {
                    Label = monthlyTransactionsByRange.First().Key,
                    Data = new List<double?>{ monthlyTransactionsByRange.First().Value },
                    BackgroundColor = new List<string>{ "palevioletred" },
                    CategoryPercentage = 0.8,
                    BarPercentage = 0.1 * monthlyTransactionsByRange.Count(),
                },
                new BarChartDataset()
                {
                    Label = monthlyTransactionsByRange.Last().Key,
                    Data = new List<double?>{ monthlyTransactionsByRange.Last().Value },
                    BackgroundColor = new List<string> { "PaleGreen" },
                    CategoryPercentage = 0.8,
                    BarPercentage = 0.1 * monthlyTransactionsByRange.Count(),
                }
            }
        };

        var options = new BarChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title!.Text = "Recent Transactions";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font = new ChartFont { Size = 20 };

        options.Responsive = true;

        options.Scales.X!.Title = new ChartAxesTitle { Text = "Month", Display = true };
        options.Scales.Y!.Title = new ChartAxesTitle { Text = "Total", Display = true };

        await monthlyTransactionsByRangeChart.InitializeAsync(data, options);
    }

    private async Task RenderProjectedMonthlyBalanceByRange()
    {
        var data = new ChartData
        {
            Labels = projectedMonthlyBalanceByRange.Select(p => p.Key).ToList(),
            Datasets = new List<IChartDataset>()
        {
            new LineChartDataset()
            {
                Label = "Balance",
                Data = projectedMonthlyBalanceByRange.Select(p => p.Value).ToList(),
                BackgroundColor = "PaleGreen",
                BorderColor = "PaleGreen",
                BorderWidth = 2,
                HoverBorderWidth = 4,
                //PointBackgroundColor = "rgb(88, 80, 141)",
                //PointBorderColor = "rgb(88, 80, 141)",
                //PointRadius = 0, // hide points
                //PointHoverRadius = 4,
            },
        }
    };

        var options = new LineChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title!.Text = "Projected Balance";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font = new ChartFont { Size = 20 };

        options.Responsive = true;

        options.Scales.X!.Title = new ChartAxesTitle { Text = "Month", Display = true };
        options.Scales.Y!.Title = new ChartAxesTitle { Text = "Total", Display = true };

        await projectedMonthlyBalanceByRangeChart.InitializeAsync(data, options);
    }

    private async Task<GridDataProviderResult<TransactionDTO>> TransactionsDataProvider(GridDataProviderRequest<TransactionDTO> request)
    {
        Transactions = (await TransactionService.List()).OrderByDescending(t => t.Date).ThenByDescending(t => t.Id).ToList();

        return await Task.FromResult(request.ApplyTo(Transactions));
    }

    private async Task AddTransactionAsync(TransactionDTO newTransaction)
    {
        await Create(newTransactionDTO);
        showNewTransactionModal = false;
        await gridRef.RefreshDataAsync();
    }

    private async Task DeleteTransactionAsync(int id)
    {
        var confirmed = await confirmModal.ShowAsync(
            title: "Delete Transaction!",
            message: "Are you sure you want to delete this Transaction?",
            type: ConfirmModal.ConfirmType.Danger
        );

        if (confirmed)
        {
            await Delete(id);
            await gridRef.RefreshDataAsync();
        }
    }
}