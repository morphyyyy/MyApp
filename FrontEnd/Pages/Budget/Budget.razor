@page "/budget"
@using FrontEnd.Pages.Transactions
@using FrontEnd.Services.Contracts;
@using Models.DTOs
@using System.Drawing
@inherits TransactionsBase
@inject ITransactionService TransactionService

<h3>Budget</h3>

<LineChart @ref="projection" />

@code {
    private LineChart projection = default!;
    private Color PaleGreen = Color.FromName("PaleGreen");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderProjectionAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RenderProjectionAsync()
    {
        var data = new ChartData
            {
                Labels = projectedMonthlyBalanceByRange.Select(p => p.Key).ToList(),
                Datasets = new List<IChartDataset>()
            {
                new LineChartDataset()
                {
                    Label = "Balance",
                    Data = projectedMonthlyBalanceByRange.Select(p => p.Value).ToList(),
                    BackgroundColor = $"rgb({PaleGreen.R}, {PaleGreen.G}, {PaleGreen.B})",
                    BorderColor = $"rgb({PaleGreen.R}, {PaleGreen.G}, {PaleGreen.B})",
                    BorderWidth = 2,
                    HoverBorderWidth = 4,
                    //PointBackgroundColor = "rgb(88, 80, 141)",
                    //PointBorderColor = "rgb(88, 80, 141)",
                    //PointRadius = 0, // hide points
                    //PointHoverRadius = 4,
                },
            }
        };

        var options = new LineChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title!.Text = "Budget";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font = new ChartFont { Size = 20 };

        options.Responsive = true;

        options.Scales.X!.Title = new ChartAxesTitle { Text = "Month", Display = true };
        options.Scales.Y!.Title = new ChartAxesTitle { Text = "Total", Display = true };

        await projection.InitializeAsync(data, options);
    }
}
